// Generated by Haxe
(function ($hx_exports) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw new js__$Boot_HaxeError("EReg::matched");
	}
	,matchedPos: function() {
		if(this.r.m == null) throw new js__$Boot_HaxeError("No string matched");
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) len = -1;
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0?s:HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) this.r.s = s;
			return b;
		} else {
			var b1 = this.match(len < 0?HxOverrides.substr(s,pos,null):HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) break; else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else offset = p.pos + p.len;
			if(!this.r.global) break;
		}
		if(!this.r.global && offset > 0 && offset < s.length) buf_b += Std.string(HxOverrides.substr(s,offset,null));
		return buf_b;
	}
};
var HaxeContext = function(context) {
	this.context = context;
	this.haxeProcess = null;
	this.configuration = Vscode.workspace.getConfiguration("haxe");
	platform_Platform.init(process.platform);
	haxe_HaxeConfiguration.update(this.configuration,platform_Platform.instance);
	this.classPaths = [];
	this.useInternalBuildFile = false;
	this.useTmpDir = false;
	this.projectDir = Vscode.workspace.rootPath;
	this.tmpToRealMap = new haxe_ds_StringMap();
	this.insensitiveToSensitiveMap = new haxe_ds_StringMap();
	this.initTmpDir();
	this.diagnostics = Vscode.languages.createDiagnosticCollection("haxe");
	context.subscriptions.push(this.diagnostics);
	this.documentsState = new haxe_ds_StringMap();
	this.pendingSaves = new haxe_ds_StringMap();
	this.lastModification = 0;
	this.lastDiagnostic = 0;
	this.checkForDiagnostic = false;
	this.checkTimer = new haxe_Timer(50);
	this.checkTimer.run = $bind(this,this.check);
	context.subscriptions.push(this);
};
HaxeContext.__name__ = true;
HaxeContext.languageID = function() {
	return "haxe";
};
HaxeContext.isDirty = function(ds) {
	if(ds.document != null) return ds.lastModification > ds.lastSave; else return false;
};
HaxeContext.isSaving = function(ds) {
	return ds.lastSave < ds.saveStartAt;
};
HaxeContext.saved = function(ds) {
	ds.lastSave = new Date().getTime();
};
HaxeContext.dirty = function(ds) {
	ds.lastSave = ds.lastModification - 1;
};
HaxeContext.modified = function(ds) {
	ds.lastModification = new Date().getTime();
};
HaxeContext.isHaxeDocument = function(document) {
	return document.languageId == "haxe";
};
HaxeContext.path = function(ds) {
	if(ds.tmpPath == null) return ds.realPath; else return ds.tmpPath;
};
HaxeContext.prototype = {
	get_realWorkingDir: function() {
		return this.projectDir;
	}
	,get_workingDir: function() {
		if(this.useTmpDir && this.configuration.haxeUseTmpAsWorkingDirectory) return this.tmpProjectDir; else return this.projectDir;
	}
	,get_realBuildFile: function() {
		return this.configuration.haxeDefaultBuildFile;
	}
	,get_internalBuildFile: function() {
		return this.configuration.haxeVSCodeBuildFile;
	}
	,get_buildFile: function() {
		if(this.useInternalBuildFile) return this.configuration.haxeVSCodeBuildFile; else return this.configuration.haxeDefaultBuildFile;
	}
	,get_buildFileWithPath: function() {
		return js_node_Path.join(this.get_workingDir(),this.get_buildFile());
	}
	,get_realBuildFileWithPath: function() {
		return js_node_Path.join(this.projectDir,this.configuration.haxeDefaultBuildFile);
	}
	,get_internalBuildFileWithPath: function() {
		return js_node_Path.join(this.get_workingDir(),this.configuration.haxeVSCodeBuildFile);
	}
	,canRunDiagnostic: function(ds) {
		if(ds.diagnoseOnSave) return ds.lastSave >= this.lastDiagnostic; else return false;
	}
	,tmpToReal: function(fileName) {
		var nfile = Tool.normalize(fileName);
		var tmp;
		var _this = this.tmpToRealMap;
		if(__map_reserved[nfile] != null) tmp = _this.getReserved(nfile); else tmp = _this.h[nfile];
		var tmp1 = tmp;
		if(tmp1 != null) return tmp1;
		if(platform_Platform.instance.isWin) {
			var tmp2;
			var _this2 = this.insensitiveToSensitiveMap;
			if(__map_reserved[nfile] != null) tmp2 = _this2.getReserved(nfile); else tmp2 = _this2.h[nfile];
			tmp1 = tmp2;
			if(tmp1 != null) return tmp1;
		}
		return fileName;
	}
	,insensitiveToSensitive: function(file) {
		if(!platform_Platform.instance.isWin) return file;
		var nfile = Tool.normalize(file);
		var tmp;
		var _this = this.insensitiveToSensitiveMap;
		if(__map_reserved[nfile] != null) tmp = _this.getReserved(nfile); else tmp = _this.h[nfile];
		var tmp1 = tmp;
		if(tmp1 != null) return tmp1;
		var paths = nfile.split(js_node_Path.sep);
		var fileName = paths.pop();
		var path = paths.join(js_node_Path.sep);
		var paths1 = js_node_Fs.readdirSync(path);
		var _g = 0;
		while(_g < paths1.length) {
			var p = paths1[_g];
			++_g;
			if(p.toLowerCase() == fileName) {
				file = js_node_Path.join(path,p);
				var _this1 = this.insensitiveToSensitiveMap;
				if(__map_reserved[nfile] != null) _this1.setReserved(nfile,file); else _this1.h[nfile] = file;
				break;
			}
		}
		return file;
	}
	,cancelDiagnostic: function() {
		this.checkForDiagnostic = false;
		this.lastDiagnostic = new Date().getTime();
	}
	,getDirtyDocuments: function() {
		var dd = [];
		var _this = this.documentsState;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var ds = tmp.next();
			if(ds.document != null && ds.lastModification > ds.lastSave) dd.push(ds);
		}
		return dd;
	}
	,createTmpFile: function(ds) {
		if(this.useTmpDir && ds.document != null && ds.tmpPath == null) {
			var path = js_node_Path.normalize(ds.realPath);
			var npath = path.toLowerCase();
			var file = null;
			var pack = "";
			var _g = 0;
			var _g1 = this.classPaths;
			while(_g < _g1.length) {
				var cp = _g1[_g];
				++_g;
				var tmp = npath.split(cp);
				if(tmp.length > 1) {
					tmp.shift();
					pack = cp;
					file = HxOverrides.substr(path,cp.length,null);
					break;
				}
			}
			if(pack != "") {
				var tmpFile = js_node_Path.join(this.tmpProjectDir,file);
				var dirs = file.split(js_node_Path.sep);
				dirs.pop();
				if(dirs.length > 0) {
					dirs = [this.tmpProjectDir].concat(dirs);
					try {
						Tool.mkDirsSync(dirs);
					} catch( e ) {
						Vscode.window.showErrorMessage("Can't create tmp directory " + tmpFile);
					}
				}
				try {
					js_node_Fs.writeFileSync(tmpFile,ds.document.getText(),"utf8");
					ds.tmpPath = tmpFile;
					var key = Tool.normalize(tmpFile);
					var _this = this.tmpToRealMap;
					if(__map_reserved[key] != null) _this.setReserved(key,path); else _this.h[key] = path;
				} catch( e1 ) {
					Vscode.window.showErrorMessage("Can't save temporary file " + tmpFile);
				}
			}
		}
	}
	,addClassPath: function(cp) {
		if(!js_node_Path.isAbsolute(cp)) cp = js_node_Path.join(this.projectDir,cp);
		cp = Tool.normalize(cp + js_node_Path.sep);
		this.classPaths.push(cp);
		this.classPaths.sort(function(a,b) {
			return b.length - a.length;
		});
		return cp;
	}
	,clearClassPaths: function() {
		this.classPaths = [];
		this.addClassPath(".");
	}
	,resetDirtyDocuments: function() {
		var dd = [];
		var _this = this.documentsState;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var ds = tmp.next();
			if(ds.document == null) continue;
			if(ds.document.isDirty) {
				ds.lastSave = ds.lastModification - 1;
				dd.push(ds);
			}
		}
		return dd;
	}
	,resetSavedDocuments: function() {
		var t = new Date().getTime();
		var _this = this.documentsState;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var ds = tmp.next();
			if(ds.document == null) continue;
			ds.lastSave = t;
		}
	}
	,send: function(categorie,restoreCommandLine,retry,priority) {
		if(priority == null) priority = 0;
		if(retry == null) retry = 1;
		if(restoreCommandLine == null) restoreCommandLine = false;
		var _g = this;
		return new Promise(function(accept,reject) {
			var trying = retry;
			var needResetSave = false;
			var onData = null;
			onData = function(m) {
				if(needResetSave) {
					_g.resetSavedDocuments();
					needResetSave = false;
				}
				if(m.severity == 3) {
					if(restoreCommandLine) _g.client.cmdLine.restore();
					reject(m);
					return;
				}
				var e = m.error;
				if(e == null && m.severity != 2) {
					if(restoreCommandLine) _g.client.cmdLine.restore();
					accept(m);
				} else if(e != null) {
					--trying;
					if(trying < 0) {
						if(restoreCommandLine) _g.client.cmdLine.restore();
						reject(m);
					} else _g.launchServer().then(function(port) {
						_g.client.sendAll(onData,false,categorie,10000,false);
					},function(port1) {
						if(restoreCommandLine) _g.client.cmdLine.restore();
						reject(m);
					});
				} else {
					if(restoreCommandLine) _g.client.cmdLine.restore();
					reject(m);
				}
			};
			_g.client.sendAll(onData,false,categorie,0,false);
		});
	}
	,saveDocument: function(ds) {
		return this.saveFullDocument(ds);
	}
	,saveFullDocument: function(ds) {
		var _g = this;
		if(this.client.isPatchAvailable) return new Promise(function(accept,reject) {
			if(!(ds.document != null && ds.lastModification > ds.lastSave)) accept(ds); else _g.patchFullDocument(ds).then(function(ds1) {
				accept(ds1);
			},function(ds2) {
				reject(ds2);
			});
		}); else return new Promise(function(accept2,reject2) {
			var document = ds.document;
			if(document == null) reject2(ds);
			if(_g.useTmpDir && ds.tmpPath != null) {
				try {
					js_node_Fs.writeFile(ds.tmpPath,document.getText(),"utf8",function(e) {
						if(e != null) reject2(ds); else {
							_g.onSaveDocument(ds.document);
							accept2(ds);
						}
					});
				} catch( e2 ) {
				}
				return;
			} else if(document.isDirty) {
				var path = ds.tmpPath == null?ds.realPath:ds.tmpPath;
				var tmp;
				var _this = _g.pendingSaves;
				if(__map_reserved[path] != null) tmp = _this.getReserved(path); else tmp = _this.h[path];
				var pf = tmp;
				var npf = { ds : ds, reject : reject2, accept : accept2, lastModification : ds.lastModification};
				if(pf != null) {
					pf.reject(pf.ds);
					var _this2 = _g.pendingSaves;
					if(__map_reserved[path] != null) _this2.setReserved(path,npf); else _this2.h[path] = npf;
				} else {
					var _this3 = _g.pendingSaves;
					if(__map_reserved[path] != null) _this3.setReserved(path,npf); else _this3.h[path] = npf;
					var doSave = null;
					doSave = function(ds3) {
						ds3.saveStartAt = new Date().getTime();
						ds3.document.save().then(function(saved) {
							var path3 = ds3.tmpPath == null?ds3.realPath:ds3.tmpPath;
							var tmp3;
							var _this4 = _g.pendingSaves;
							if(__map_reserved[path3] != null) tmp3 = _this4.getReserved(path3); else tmp3 = _this4.h[path3];
							var pf4 = tmp3;
							if(pf4 != null) {
								ds3 = pf4.ds;
								if(ds3.lastModification > pf4.lastModification) {
									pf4.lastModification = ds3.lastModification;
									doSave(pf4.ds);
									return;
								} else _g.pendingSaves.remove(path3);
							}
							if(saved) {
								ds3.lastSave = new Date().getTime();
								pf4.accept(ds3);
							} else {
								ds3.saveStartAt = 0;
								pf4.reject(ds3);
							}
						});
					};
					doSave(ds);
				}
			} else {
				ds.lastSave = new Date().getTime();
				accept2(ds);
			}
		});
	}
	,check: function() {
		var _g2 = this;
		var time = new Date().getTime();
		if(this.checkForDiagnostic && this.configuration.haxeDiagnoseOnSave) {
			var dlt = time - this.lastDiagnostic;
			if(dlt >= this.configuration.haxeDiagnosticDelay) {
				this.checkForDiagnostic = false;
				if(this.client.isPatchAvailable) {
					var dd = this.getDirtyDocuments();
					var cnt = dd.length;
					var doDiagnostic = false;
					var _g1 = 0;
					var _g = dd.length;
					while(_g1 < _g) {
						var i = _g1++;
						var ds = dd[i];
						var document = ds.document;
						cnt--;
						doDiagnostic = doDiagnostic || this.canRunDiagnostic(ds);
						this.diagnostics["delete"](document.uri);
						this.patchFullDocument(ds).then(function(ds1) {
							if(cnt == 0 && doDiagnostic) _g2.diagnose(1);
						});
					}
				} else {
					var dd1 = this.getDirtyDocuments();
					var cnt1 = dd1.length;
					if(cnt1 == 0) return;
					var _g3 = 0;
					while(_g3 < cnt1) {
						var i3 = _g3++;
						var ds3 = dd1[i3];
						ds3.diagnoseOnSave = i3 == cnt1 - 1;
						if(ds3.lastSave < ds3.saveStartAt) continue;
						this.saveFullDocument(ds3);
					}
				}
			}
		}
	}
	,init: function() {
		this.client = new haxe_HaxeClient(this.configuration.haxeServerHost,this.configuration.haxeServerPort);
		this.context.subscriptions.push(Vscode.workspace.onDidChangeTextDocument($bind(this,this.changePatch)));
		this.changeDebouncer = new Debouncer(300,$bind(this,this.changePatchs));
		this.context.subscriptions.push(Vscode.workspace.onDidOpenTextDocument($bind(this,this.onOpenDocument)));
		this.context.subscriptions.push(Vscode.workspace.onDidSaveTextDocument($bind(this,this.onSaveDocument)));
		this.context.subscriptions.push(Vscode.workspace.onDidCloseTextDocument($bind(this,this.onCloseDocument)));
		this.completionHandler = new features_CompletionHandler(this);
		this.definitionHandler = new features_DefinitionHandler(this);
		this.signatureHandler = new features_SignatureHandler(this);
		return this.launchServer();
	}
	,initTmpDir: function() {
		if(this.configuration.haxeTmpDirectory != "") {
			this.tmpDir = haxe_HaxeConfiguration.addTrailingSep(this.configuration.haxeTmpDirectory,platform_Platform.instance);
			this.tmpProjectDir = Tool.normalize(js_node_Path.join(this.tmpDir,haxe_crypto_Sha1.encode(this.projectDir)));
			try {
				Tool.mkDirSync(this.tmpProjectDir);
				this.useTmpDir = true;
			} catch( e ) {
				this.unuseTmpDir();
				Vscode.window.showErrorMessage("Can't create temporary directory " + this.tmpProjectDir);
			}
		} else this.unuseTmpDir();
	}
	,unuseTmpDir: function() {
		this.useTmpDir = false;
		this.tmpProjectDir = null;
	}
	,launchServer: function() {
		var _g = this;
		var host = this.configuration.haxeServerHost;
		var port = this.configuration.haxeServerPort;
		this.client.host = host;
		this.client.port = port;
		return new Promise(function(resolve,reject) {
			var incPort = 0;
			var onData = null;
			onData = function(data) {
				if(data.isHaxeServer) {
					_g.configuration.haxeServerPort = port;
					_g.client.port = port;
					Vscode.window.showInformationMessage("Using " + (_g.client.isPatchAvailable?"--patch":"non-patching") + " completion server at " + _g.configuration.haxeServerHost + " on port " + port);
					if(data.isPatchAvailable) {
						var cl = _g.client.cmdLine.save();
						var dd = _g.resetDirtyDocuments();
						if(dd.length > 0) {
							var _g1 = 0;
							while(_g1 < dd.length) {
								var ds = dd[_g1];
								++_g1;
								cl.beginPatch(ds.tmpPath == null?ds.realPath:ds.tmpPath).replace(ds.document.getText());
							}
							_g.client.sendAll(function(m) {
								resolve(port);
							},true,null,30000);
							return;
						}
					}
					resolve(port);
					return;
				} else {
					if(_g.haxeProcess != null) _g.haxeProcess.kill("SIGKILL");
					port += incPort;
					incPort = 1;
					_g.haxeProcess = js_node_ChildProcess.spawn(_g.configuration.haxeExec,["--wait","" + port]);
					if(_g.haxeProcess.pid > 0) {
						_g.client.port = port;
						_g.client.infos(onData);
					}
					_g.haxeProcess.on("error",function(err) {
						_g.haxeProcess = null;
						Vscode.window.showErrorMessage("Can't spawn " + _g.configuration.haxeExec + " process\n" + err.message);
						reject(err);
					});
				}
			};
			_g.client.infos(onData);
		});
	}
	,dispose: function() {
		Vscode.window.showInformationMessage("Got dispose!");
		if(this.checkTimer != null) {
			this.checkTimer.stop();
			this.checkTimer = null;
		}
		if(this.client.isServerAvailable && this.client.isPatchAvailable) {
			var cl = this.client.cmdLine;
			var _g = 0;
			var _g1 = Vscode.window.visibleTextEditors;
			while(_g < _g1.length) {
				var editor = _g1[_g];
				++_g;
				var path = editor.document.uri.fsPath;
				this.documentsState.remove(path);
				cl.beginPatch(path).remove();
			}
			this.client.sendAll(null);
		}
		if(this.haxeProcess != null) {
			this.haxeProcess.kill("SIGKILL");
			this.haxeProcess = null;
		}
		this.client = null;
		return null;
	}
	,applyDiagnostics: function(message) {
		if(message.severity == 3) return;
		var all = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = message.infos;
		while(_g < _g1.length) {
			var info = _g1[_g];
			++_g;
			var tmp;
			var key = info.fileName;
			if(__map_reserved[key] != null) tmp = all.getReserved(key); else tmp = all.h[key];
			var diags = tmp;
			if(diags == null) {
				diags = [];
				var key1 = info.fileName;
				if(__map_reserved[key1] != null) all.setReserved(key1,diags); else all.h[key1] = diags;
			}
			diags.push(new Vscode.Diagnostic(Tool.toVSCRange(info),info.message,Tool.toVSCSeverity(message.severity)));
		}
		var tmp1 = all.keys();
		while(tmp1.hasNext()) {
			var fileName = tmp1.next();
			var diags1 = __map_reserved[fileName] != null?all.getReserved(fileName):all.h[fileName];
			fileName = this.tmpToReal(fileName);
			var url = Vscode.Uri.file(fileName);
			if(diags1 == null) {
				this.diagnostics.set(url,[]);
				continue;
			}
			this.diagnostics.set(url,diags1);
		}
		this.lastDiagnostic = new Date().getTime();
	}
	,getDocumentState: function(path,document) {
		var npath = Tool.normalize(path);
		var tmp;
		var _this = this.documentsState;
		if(__map_reserved[npath] != null) tmp = _this.getReserved(npath); else tmp = _this.h[npath];
		var ds = tmp;
		if(ds != null) {
			if(document != null) ds.document = document;
			if(this.useTmpDir && ds.tmpPath == null) this.createTmpFile(ds);
		} else {
			ds = { realPath : path, saveStartAt : 0, lastSave : 0, lastModification : 0, document : document, diagnoseOnSave : true, tmpPath : null};
			var _this1 = this.documentsState;
			if(__map_reserved[path] != null) _this1.setReserved(path,ds); else _this1.h[path] = ds;
			var _this2 = this.documentsState;
			if(__map_reserved[npath] != null) _this2.setReserved(npath,ds); else _this2.h[npath] = ds;
			this.createTmpFile(ds);
		}
		return ds;
	}
	,onCloseDocument: function(document) {
		var path = document.uri.fsPath;
		var ds = this.getDocumentState(path);
		ds.document = null;
		ds.realPath = null;
		ds.tmpPath = null;
		this.documentsState.remove(path);
		var key = Tool.normalize(path);
		this.documentsState.remove(key);
		if(this.client.isPatchAvailable) {
			this.client.cmdLine.save().beginPatch(path).remove();
			this.client.sendAll(null,true);
		}
		this.diagnostics["delete"](document.uri);
	}
	,onOpenDocument: function(document) {
		this.getDocumentState(document.uri.fsPath,document);
		this.removeAndDiagnoseDocument(document);
	}
	,patchFullDocument: function(ds) {
		var _g = this;
		return new Promise(function(accept,reject) {
			var document = ds.document;
			if(document == null) {
				reject(ds);
				return;
			}
			_g.client.cmdLine.save().beginPatch(ds.tmpPath == null?ds.realPath:ds.tmpPath).replace(document.getText());
			_g.send(null,true,1).then(function(m) {
				ds.lastSave = new Date().getTime();
				accept(ds);
			},function(m1) {
				reject(ds);
			});
		});
	}
	,onSaveDocument: function(document) {
		var ds = this.getDocumentState(document.uri.fsPath,document);
		ds.lastSave = new Date().getTime();
		if(this.configuration.haxeDiagnoseOnSave) {
			if(ds.diagnoseOnSave) {
				this.checkForDiagnostic = true;
				this.removeAndDiagnoseDocument(document);
			} else ds.diagnoseOnSave = true;
		}
	}
	,diagnoseIfAllowed: function() {
		if(this.configuration.haxeDiagnoseOnSave) this.diagnose(1);
	}
	,diagnose: function(retry) {
		var _g = this;
		this.client.cmdLine.save().cwd(this.get_workingDir()).hxml(this.get_buildFile()).noOutput();
		this.send("diagnostic@1",true,retry).then(function(m) {
			_g.applyDiagnostics(m);
		},function(m1) {
			if(m1.error != null) Vscode.window.showErrorMessage(m1.error.message);
			_g.applyDiagnostics(m1);
		});
	}
	,removeAndDiagnoseDocument: function(document) {
		this.diagnostics["delete"](document.uri);
		var path = document.uri.fsPath;
		if(this.client.isPatchAvailable) this.client.cmdLine.beginPatch(path).remove();
		this.diagnose(1);
	}
	,changePatch: function(event) {
		var document = event.document;
		if(event.contentChanges.length == 0 || document.languageId != "haxe") return;
		this.checkForDiagnostic = false;
		var ds = this.getDocumentState(document.uri.fsPath,document);
		ds.document = document;
		ds.lastModification = new Date().getTime();
		this.lastModification = ds.lastModification;
		this.changeDebouncer.debounce(event);
	}
	,changePatchs: function(events) {
		this.checkForDiagnostic = true;
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10?"0" + m:"" + m) + "-" + (d < 10?"0" + d:"" + d) + " " + (h < 10?"0" + h:"" + h) + ":" + (mi < 10?"0" + mi:"" + mi) + ":" + (s < 10?"0" + s:"" + s);
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) len = s.length; else if(len < 0) {
		if(pos == 0) len = s.length + len; else return "";
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var HxmlContext = function(hxContext) {
	this.hxContext = hxContext;
	this.hxContext.context.subscriptions.push(Vscode.languages.registerHoverProvider("hxml",{ provideHover : $bind(this,this.onHover)}));
	this.haxelibCache = new haxe_ds_StringMap();
	this.buildWatcher = Vscode.workspace.createFileSystemWatcher(hxContext.get_realBuildFileWithPath(),true,false,true);
	this.buildWatcher.onDidChange($bind(this,this.onBuildChange));
	this.makeInternalBuild();
	new features_hxml_CompletionHandler(this);
	this.hxContext.context.subscriptions.push(this);
};
HxmlContext.__name__ = true;
HxmlContext.languageID = function() {
	return "hxml";
};
HxmlContext.isHxmlDocument = function(document) {
	return document.languageId == "hxml";
};
HxmlContext.prototype = {
	get_context: function() {
		return this.hxContext.context;
	}
	,get_client: function() {
		return this.hxContext.client;
	}
	,onBuildChange: function(e) {
		this.makeInternalBuild();
	}
	,dispose: function() {
		this.buildWatcher.dispose();
		js_node_Fs.unlinkSync(this.hxContext.get_internalBuildFileWithPath());
	}
	,makeInternalBuild: function() {
		this.hxContext.clearClassPaths();
		var lines = this.read(this.hxContext.get_realBuildFileWithPath());
		var newLines = this.parseLines(lines);
		if(newLines != null) lines = newLines;
		this.hxContext.useInternalBuildFile = true;
		js_node_Fs.writeFileSync(this.hxContext.get_internalBuildFileWithPath(),newLines.join("\n"),"utf8");
	}
	,read: function(fileName) {
		try {
			return js_node_Fs.readFileSync(fileName,"utf8").split("\n");
		} catch( e ) {
			Vscode.window.showErrorMessage("Can't read file " + fileName);
			return [];
		}
	}
	,parseLines: function(lines) {
		var newLines = ["#automatically generated do not edit","#@date " + Std.string(new Date())];
		newLines = this._parseLines(lines,newLines);
		if(this.hxContext.useTmpDir) newLines.push("-cp " + this.hxContext.tmpProjectDir);
		return newLines;
	}
	,_parseLines: function(lines,acc,isLib) {
		if(isLib == null) isLib = false;
		if(acc == null) acc = [];
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			line = StringTools.trim(line);
			if(line == "") {
				acc.push("\n");
				continue;
			}
			if(this.hxContext.configuration.haxeCacheHaxelib && HxmlContext.reLibOption.match(line)) {
				acc.push("#@begin-cache " + line);
				var ret = this.cacheLibData(HxmlContext.reLibOption.matched(1),acc);
				if(ret == null) return null;
				if(ret[ret.length - 1] == "\n") ret.pop();
				acc = ret;
				ret.push("#@end-cache");
			} else if(HxmlContext.reCpOption.match(line)) acc.push("-cp " + this.hxContext.addClassPath(HxmlContext.reCpOption.matched(1))); else if(!isLib) acc.push(line); else switch(line.charAt(0)) {
			case "-":case "#":
				acc.push(line);
				break;
			default:
				acc.push("-cp " + this.hxContext.addClassPath(line));
			}
		}
		return acc;
	}
	,cacheLibData: function(libName,datas) {
		var tmp;
		var _this = this.haxelibCache;
		if(__map_reserved[libName] != null) tmp = _this.getReserved(libName); else tmp = _this.h[libName];
		var d = tmp;
		if(d != null) return datas.concat(d);
		var _this1 = this.haxelibCache;
		var value = [];
		if(__map_reserved[libName] != null) _this1.setReserved(libName,value); else _this1.h[libName] = value;
		var exec = this.hxContext.configuration.haxelibExec;
		var out = js_node_ChildProcess.spawnSync(exec,["path",libName],{ encoding : "utf8"});
		if(out.pid == 0) {
			Vscode.window.showErrorMessage("Cant find " + exec);
			return null;
		}
		if(out.status == 1) {
			Vscode.window.showErrorMessage(out.stdout);
			return null;
		}
		return this._parseLines(out.stdout.split("\n"),datas,true);
	}
	,onHover: function(document,position,cancelToken) {
		var sHover = "";
		var client = this.hxContext.client;
		if(client != null) {
			var text = document.lineAt(position).text;
			if(HxmlContext.reCheckOption.match(text)) {
				var prefix = HxmlContext.reCheckOption.matched(1);
				var name = HxmlContext.reCheckOption.matched(3);
				var param = HxmlContext.reCheckOption.matched(5);
				if(prefix == "-" && name == "D") {
					if(HxmlContext.reDefineParam.match(param)) {
						var defineName = HxmlContext.reDefineParam.matched(1);
						var tmp;
						var _this = client.definesByName;
						if(__map_reserved[defineName] != null) tmp = _this.getReserved(defineName); else tmp = _this.h[defineName];
						var define = tmp;
						if(define != null) sHover = define.doc;
					}
				} else {
					var tmp1;
					var _this1 = client.optionsByName;
					if(__map_reserved[name] != null) tmp1 = _this1.getReserved(name); else tmp1 = _this1.h[name];
					var option = tmp1;
					if(option != null) sHover = option.doc;
				}
			} else if(HxmlContext.reMain.match(text)) sHover = "Main file : " + HxmlContext.reMain.matched(1);
		}
		return new Vscode.Hover(sHover);
	}
};
var Main = function() { };
Main.__name__ = true;
Main.main = $hx_exports["activate"] = function(context) {
	var hc = new HaxeContext(context);
	hc.init();
	new HxmlContext(hc);
};
Main.test_register_command = function(context) {
	context.subscriptions.push(Vscode.commands.registerCommand("haxe.hello",function() {
		Vscode.window.showInformationMessage("Hello from haxe!");
	}));
};
Main.test_register_hover = function(context) {
	var disposable = Vscode.languages.registerHoverProvider("haxe",{ provideHover : function(document,position,cancelToken) {
		return new Vscode.Hover("I am a hover! pos: " + JSON.stringify(position));
	}});
	context.subscriptions.push(disposable);
};
Main.test_register_hover_thenable = function(context) {
	var disposable = Vscode.languages.registerHoverProvider("haxe",{ provideHover : function(document,position,cancelToken) {
		var s = JSON.stringify(position);
		return new Promise(function(resolve) {
			var h = new Vscode.Hover("I am a thenable hover! pos: " + s);
			resolve(h);
		});
	}});
	context.subscriptions.push(disposable);
};
Math.__name__ = true;
var Socket = function() {
	this.s = new js_node_net_Socket();
	this.reset();
};
Socket.__name__ = true;
Socket.prototype = {
	reset: function() {
		this.datas = [];
		this.isConnected = false;
		this.isClosed = false;
		this.error = null;
	}
	,onConnect: function(callback) {
		if(callback != null) callback(this);
	}
	,onError: function(err,callback) {
		if(callback != null) callback(this,err);
	}
	,onData: function(data,callback) {
		data = data.toString();
		this.datas.push(data);
		if(callback != null) callback(this,data);
	}
	,onClose: function(callback) {
		this.isConnected = false;
		this.isClosed = true;
		if(callback != null) callback(this);
	}
	,connect: function(host,port,onConnect,onData,onError,onClose) {
		var _g = this;
		this.error = null;
		this.s.on("error",function(err) {
			_g.error = err;
			_g.onError(err,onError);
		});
		this.s.on("data",function(data) {
			_g.onData(data,onData);
		});
		this.s.on("close",function() {
			_g.onClose(onClose);
		});
		this.s.connect(port,host,function() {
			_g.isConnected = true;
			_g.onConnect(onConnect);
		});
	}
	,write: function(text) {
		return this.s.write(text);
	}
	,readAll: function() {
		return this.s.read();
	}
	,close: function() {
		this.s.destroy();
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) return c == 32; else return true;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) break;
	}
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
var Tool = function() { };
Tool.__name__ = true;
Tool.displayAsInfo = function(s) {
	Vscode.window.showInformationMessage(s);
};
Tool.displayAsError = function(s) {
	Vscode.window.showErrorMessage(s);
};
Tool.displayAsWarning = function(s) {
	Vscode.window.showWarningMessage(s);
};
Tool.getTime = function() {
	return new Date().getTime();
};
Tool.mkDirSync = function(path) {
	try {
		js_node_Fs.mkdirSync(path);
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if(e.code != "EEXIST") throw js__$Boot_HaxeError.wrap(e);
	}
};
Tool.mkDirsSync = function(dirs) {
	var path = "";
	var _g = 0;
	while(_g < dirs.length) {
		var dir = dirs[_g];
		++_g;
		path = js_node_Path.join(path,dir);
		Tool.mkDirSync(path);
	}
};
Tool.normalize = function(path) {
	path = js_node_Path.normalize(path);
	if(platform_Platform.instance.isWin) path = path.toLowerCase();
	return path;
};
Tool.byteLength = function(str) {
	return js_node_buffer_Buffer.byteLength(str);
};
Tool.byte_pos = function(text,char_pos) {
	if(char_pos == text.length) return js_node_buffer_Buffer.byteLength(text); else return js_node_buffer_Buffer.byteLength(HxOverrides.substr(text,0,char_pos));
};
Tool.toVSCSeverity = function(s) {
	switch(s) {
	case 0:
		return Vscode.DiagnosticSeverity.Hint;
	case 1:
		return Vscode.DiagnosticSeverity.Warning;
	case 2:
		return Vscode.DiagnosticSeverity.Error;
	default:
		return Vscode.DiagnosticSeverity.Hint;
	}
};
Tool.toVSCRange = function(info) {
	var r = info.range;
	if(r.isLineRange) return new Vscode.Range(new Vscode.Position(r.start - 1,0),new Vscode.Position(r.end - 1,0)); else return new Vscode.Range(new Vscode.Position(info.lineNumber - 1,r.start),new Vscode.Position(info.lineNumber - 1,r.end));
};
var Debouncer = function(delay_ms,fn) {
	this.last = 0;
	this.queue = [];
	this.onDone = [];
	this.delay = delay_ms;
	this.fn = fn;
	this.last = 0;
	this.timer = new haxe_Timer(50);
	this.timer.run = $bind(this,this.apply);
};
Debouncer.__name__ = true;
Debouncer.prototype = {
	apply: function() {
		var dlt = new Date().getTime() - this.last;
		var q = this.queue;
		if(dlt < this.delay || q.length == 0) return;
		var od = this.onDone;
		this.queue = [];
		this.onDone = [];
		this.fn(q);
		var _g = 0;
		while(_g < od.length) {
			var f = od[_g];
			++_g;
			f();
		}
	}
	,debounce: function(e) {
		this.queue.push(e);
		this.last = new Date().getTime();
	}
	,whenDone: function(f) {
		if(this.queue.length == 0) f(); else this.onDone.push(f);
	}
	,dispose: function() {
		if(this.timer != null) {
			this.timer.stop();
			this.timer = null;
		}
	}
};
var Vscode = require("vscode");
var CompletionItemProvider = function() { };
CompletionItemProvider.__name__ = true;
var DefinitionProvider = function() { };
DefinitionProvider.__name__ = true;
var SignatureHelpProvider = function() { };
SignatureHelpProvider.__name__ = true;
var features_CompletionHandler = function(hxContext) {
	this.hxContext = hxContext;
	hxContext.context.subscriptions.push(Vscode.languages.registerCompletionItemProvider("haxe",this,".",":","{"," "));
};
features_CompletionHandler.__name__ = true;
features_CompletionHandler.__interfaces__ = [CompletionItemProvider];
features_CompletionHandler.prototype = {
	parse_items: function(msg) {
		var rtn = [];
		var datas = msg.stderr;
		if(datas.length > 2 && datas[0] == "<list>") {
			datas.shift();
			datas.pop();
			datas.pop();
			var len = datas.length;
			var i = 0;
			while(i < len) {
				var tmp = datas[i++];
				var data = "";
				if(HxOverrides.substr(tmp,0,2) == "<i") {
					while(i < len) {
						data += tmp;
						if(HxOverrides.substr(tmp,tmp.length - 2,2) == "i>") break;
						tmp = datas[i++];
					}
					if(i == len) data += tmp;
				}
				if(features_CompletionHandler.reI.match(data)) {
					var n = features_CompletionHandler.reI.matched(1);
					var k = features_CompletionHandler.reI.matched(2);
					var ip = features_CompletionHandler.reI.matched(4);
					var f = Std.parseInt(features_CompletionHandler.reI.matched(6)) | 0;
					var t = features_CompletionHandler.reI.matched(7);
					t = features_CompletionHandler.reGT.replace(features_CompletionHandler.reLT.replace(t,"<"),">");
					var d = features_CompletionHandler.reI.matched(8);
					var ci = new Vscode.CompletionItem(n);
					ci.documentation = d;
					ci.detail = t;
					switch(k) {
					case "method":
						var ts = t.split("->");
						if(features_CompletionHandler.reMethod.match(ts[ts.length - 1])) ci.kind = Vscode.CompletionItemKind.Method; else ci.kind = Vscode.CompletionItemKind.Function;
						break;
					case "var":
						if(ip == "1") ci.kind = Vscode.CompletionItemKind.Property; else if((f & 1) != 0) ci.kind = Vscode.CompletionItemKind.Property; else ci.kind = Vscode.CompletionItemKind.Field;
						break;
					default:
						ci.kind = Vscode.CompletionItemKind.Field;
					}
					rtn.push(ci);
				}
			}
		} else rtn.push(null);
		return rtn;
	}
	,provideCompletionItems: function(document,position,cancelToken) {
		var _g = this;
		return new Promise(function(accept,reject) {
			if(cancelToken.isCancellationRequested) {
				reject([]);
				return;
			}
			var changeDebouncer = _g.hxContext.changeDebouncer;
			var client = _g.hxContext.client;
			var text = document.getText();
			var char_pos = document.offsetAt(position);
			var documentState = _g.hxContext.getDocumentState(document.uri.fsPath);
			var path = documentState.tmpPath == null?documentState.realPath:documentState.tmpPath;
			var makeCall = false;
			var displayMode = haxe_DisplayMode.Default;
			var lastChar = text.charAt(char_pos - 1);
			var isDot = lastChar == ".";
			var isTriggerChar = isDot || lastChar == "{";
			var isProbablyMeta = lastChar == ":";
			if(!isProbablyMeta && !isTriggerChar) {
				var j = char_pos - 2;
				while(j >= 0) {
					if(!features_CompletionHandler.reWord.match(text.charAt(j))) break;
					--j;
				}
				HxOverrides.substr(text,j + 1,char_pos - 1 - j);
				while(j >= 0) {
					if(!features_CompletionHandler.reWS.match(text.charAt(j))) break;
					--j;
				}
				lastChar = text.charAt(j);
				isDot = lastChar == ".";
				if(!isDot) isTriggerChar = lastChar == "{"; else isTriggerChar = true;
				if(isTriggerChar) char_pos = j + 1;
			}
			makeCall = isTriggerChar;
			if(!makeCall) {
				var items = [];
				if(isProbablyMeta && text.charAt(char_pos - 2) == "@") {
					var _g13 = 0;
					var _g23 = _g.hxContext.client.metas;
					while(_g13 < _g23.length) {
						var data = _g23[_g13];
						++_g13;
						var ci = new Vscode.CompletionItem(data.name);
						ci.documentation = data.doc;
						items.push(ci);
					}
				}
				accept(items);
				return;
			}
			var byte_pos = char_pos == text.length?js_node_buffer_Buffer.byteLength(text):js_node_buffer_Buffer.byteLength(HxOverrides.substr(text,0,char_pos));
			var make_request = function() {
				if(cancelToken.isCancellationRequested) {
					reject([]);
					return;
				}
				client.cmdLine.save().cwd(_g.hxContext.get_workingDir()).define("display-details").hxml(_g.hxContext.get_buildFile()).noOutput().display(path,byte_pos,displayMode);
				client.setContext({ fileName : path, line : position.line + 1, column : char_pos}).setCancelToken(cancelToken);
				_g.hxContext.send("completion@2",true,1,10).then(function(m) {
					if(cancelToken.isCancellationRequested) reject([]); else {
						var ret = _g.parse_items(m);
						if(ret.length == 1 && ret[0] == null) {
							ret = [];
							_g.hxContext.diagnoseIfAllowed();
						}
						accept(ret);
					}
				},function(m1) {
					if(!cancelToken.isCancellationRequested) {
						if(m1.severity == 2) _g.hxContext.applyDiagnostics(m1);
					}
					reject([]);
				});
			};
			var ds = _g.hxContext.getDocumentState(path);
			var isDirty = client.isPatchAvailable?ds.document != null && ds.lastModification > ds.lastSave:ds.document != null && ds.lastModification > ds.lastSave || document.isDirty;
			var doRequest = function() {
				if(cancelToken.isCancellationRequested) {
					reject([]);
					return;
				}
				if(client.isPatchAvailable) {
					if(isDirty) _g.hxContext.patchFullDocument(ds).then(function(ds1) {
						make_request();
					},function(ds2) {
						reject([]);
					}); else make_request();
				} else changeDebouncer.whenDone(function() {
					if(cancelToken.isCancellationRequested) {
						reject([]);
						return;
					}
					var ps = [];
					var _g1 = 0;
					var _g2 = _g.hxContext.getDirtyDocuments();
					while(_g1 < _g2.length) {
						var ds3 = _g2[_g1];
						++_g1;
						ds3.diagnoseOnSave = false;
						ps.push(_g.hxContext.saveDocument(ds3));
					}
					if(ps.length == 0) make_request(); else Promise.all(ps).then(function(all) {
						if(cancelToken.isCancellationRequested) {
							reject([]);
							return;
						}
						make_request();
					},function(all3) {
						reject([]);
					});
				});
			};
			if(!client.isServerAvailable) _g.hxContext.launchServer().then(function(port) {
				doRequest();
			},function(port3) {
				reject([]);
			}); else doRequest();
		});
	}
	,resolveCompletionItem: function(item,cancelToken) {
		return item;
	}
};
var features_DefinitionHandler = function(hxContext) {
	this.hxContext = hxContext;
	hxContext.context.subscriptions.push(Vscode.languages.registerDefinitionProvider("haxe",this));
};
features_DefinitionHandler.__name__ = true;
features_DefinitionHandler.__interfaces__ = [DefinitionProvider];
features_DefinitionHandler.prototype = {
	provideDefinition: function(document,position,cancelToken) {
		var _g = this;
		var changeDebouncer = this.hxContext.changeDebouncer;
		var client = this.hxContext.client;
		var documentState = this.hxContext.getDocumentState(document.uri.fsPath);
		var path = documentState.tmpPath == null?documentState.realPath:documentState.tmpPath;
		var displayMode = haxe_DisplayMode.Position;
		var text = document.getText();
		position = document.getWordRangeAtPosition(position).end;
		var char_pos = document.offsetAt(position) + 1;
		var byte_pos = char_pos == text.length?js_node_buffer_Buffer.byteLength(text):js_node_buffer_Buffer.byteLength(HxOverrides.substr(text,0,char_pos));
		return new Promise(function(accept,reject) {
			if(cancelToken.isCancellationRequested) reject(null);
			var make_request = function() {
				client.cmdLine.save().cwd(_g.hxContext.get_workingDir()).hxml(_g.hxContext.get_buildFile()).noOutput().display(path,byte_pos,displayMode);
				var parse = function(m) {
					if(cancelToken.isCancellationRequested) {
						reject(null);
						return;
					}
					var datas = m.stderr;
					var defs = [];
					if(datas.length >= 2 && datas[0] == "<list>") {
						datas.shift();
						datas.pop();
						var _g1 = 0;
						while(_g1 < datas.length) {
							var data = datas[_g1];
							++_g1;
							if(!features_DefinitionHandler.rePos.match(data)) continue;
							data = features_DefinitionHandler.rePos.matched(1);
							var i = haxe_Info.decode(data,_g.hxContext.projectDir);
							if(i == null) continue;
							var info = i.info;
							defs.push(new Vscode.Location(Vscode.Uri.file(_g.hxContext.tmpToReal(_g.hxContext.insensitiveToSensitive(info.fileName))),Tool.toVSCRange(info)));
						}
					}
					accept(defs);
					return;
				};
				client.setContext({ fileName : path, line : position.line + 1, column : char_pos}).setCancelToken(cancelToken);
				_g.hxContext.send(null,true,1).then(parse,function(m1) {
					if(m1.error != null) Vscode.window.showErrorMessage(m1.error.message);
					reject(null);
				});
			};
			var ds = _g.hxContext.getDocumentState(path);
			var isDirty = client.isPatchAvailable?ds.document != null && ds.lastModification > ds.lastSave:ds.document != null && ds.lastModification > ds.lastSave || document.isDirty;
			var doRequest = function() {
				if(cancelToken.isCancellationRequested) {
					reject(null);
					return;
				}
				if(client.isPatchAvailable) {
					if(isDirty) _g.hxContext.patchFullDocument(ds).then(function(ds1) {
						make_request();
					},function(ds2) {
						reject(null);
					}); else make_request();
				} else changeDebouncer.whenDone(function() {
					if(cancelToken.isCancellationRequested) {
						reject(null);
						return;
					}
					var ps = [];
					var _g12 = 0;
					var _g2 = _g.hxContext.getDirtyDocuments();
					while(_g12 < _g2.length) {
						var ds3 = _g2[_g12];
						++_g12;
						ds3.diagnoseOnSave = false;
						ps.push(_g.hxContext.saveDocument(ds3));
					}
					if(ps.length == 0) make_request(); else Promise.all(ps).then(function(all) {
						if(cancelToken.isCancellationRequested) {
							reject(null);
							return;
						}
						make_request();
					},function(all3) {
						reject(null);
					});
				});
			};
			if(!client.isServerAvailable) _g.hxContext.launchServer().then(function(port) {
				doRequest();
			},function(port3) {
				reject(null);
			}); else doRequest();
		});
	}
};
var features_FunctionDecoder = function() { };
features_FunctionDecoder.__name__ = true;
features_FunctionDecoder.asFunctionArgs = function(data) {
	var l = data.length;
	var args = [];
	var i = 0;
	var sp = 0;
	var pc = "";
	var consLevel = 0;
	var parLevel = 0;
	var argName = "";
	var canParseArgName = true;
	while(i < l) {
		var c = data.charAt(i);
		switch(c) {
		case ":":
			if(canParseArgName) {
				canParseArgName = false;
				argName = data.substring(sp,i - 1);
				sp = i + 2;
			}
			break;
		case "(":
			++parLevel;
			break;
		case ")":
			--parLevel;
			break;
		case "<":
			++consLevel;
			break;
		case ">":
			if(pc == "-") {
				if(parLevel == 0 && consLevel == 0) {
					args.push({ name : argName, type : data.substring(sp,i - 2)});
					canParseArgName = true;
					sp = i + 2;
				}
			} else --consLevel;
			break;
		}
		pc = c;
		++i;
	}
	args.push({ name : "", type : HxOverrides.substr(data,sp,null)});
	return args;
};
var features_SignatureHandler = function(hxContext) {
	this.hxContext = hxContext;
	hxContext.context.subscriptions.push(Vscode.languages.registerSignatureHelpProvider("haxe",this,"(",","));
};
features_SignatureHandler.__name__ = true;
features_SignatureHandler.__interfaces__ = [SignatureHelpProvider];
features_SignatureHandler.prototype = {
	provideSignatureHelp: function(document,position,cancelToken) {
		var _g = this;
		var client = this.hxContext.client;
		var changeDebouncer = this.hxContext.changeDebouncer;
		var documentState = this.hxContext.getDocumentState(document.uri.fsPath);
		var path = documentState.tmpPath == null?documentState.realPath:documentState.tmpPath;
		document.getText();
		var char_pos = document.offsetAt(position);
		var text = document.getText();
		var byte_pos = char_pos == text.length?js_node_buffer_Buffer.byteLength(text):js_node_buffer_Buffer.byteLength(HxOverrides.substr(text,0,char_pos));
		var displayMode = haxe_DisplayMode.Default;
		return new Promise(function(accept,reject) {
			if(cancelToken.isCancellationRequested) reject(null);
			var make_request = function() {
				client.cmdLine.save().cwd(_g.hxContext.get_workingDir()).hxml(_g.hxContext.get_buildFile()).noOutput().display(path,byte_pos,displayMode);
				client.setContext({ fileName : path, line : position.line + 1, column : char_pos}).setCancelToken(cancelToken);
				_g.hxContext.send(null,true,1).then(function(m) {
					var datas = m.stderr;
					var sh = new Vscode.SignatureHelp();
					sh.activeParameter = 0;
					sh.activeSignature = 0;
					var sigs = [];
					sh.signatures = sigs;
					if(datas.length > 2 && features_SignatureHandler.reType.match(datas[0])) {
						Std.parseInt(features_SignatureHandler.reType.matched(2));
						var index = Std.parseInt(features_SignatureHandler.reType.matched(4)) | 0;
						if(index >= 0) sh.activeParameter = index;
						datas.shift();
						datas.pop();
						datas.pop();
						var _g1 = 0;
						while(_g1 < datas.length) {
							var data = datas[_g1];
							++_g1;
							data = features_SignatureHandler.reGT.replace(data,">");
							data = features_SignatureHandler.reLT.replace(data,"<");
							var args = features_FunctionDecoder.asFunctionArgs(data);
							var ret = args.pop();
							data = "(" + args.map(function(v) {
								return v.name + ":" + v.type;
							}).join(", ") + "):" + ret.type;
							var si = new Vscode.SignatureInformation(data);
							sigs.push(si);
							si.parameters = args.map(function(v1) {
								return new Vscode.ParameterInformation(v1.name,v1.type);
							});
						}
					}
					accept(sh);
				},function(m1) {
					if(m1.error != null) Vscode.window.showErrorMessage(m1.error.message);
					reject(null);
				});
			};
			var ds = _g.hxContext.getDocumentState(path);
			var isDirty = client.isPatchAvailable?ds.document != null && ds.lastModification > ds.lastSave:ds.document != null && ds.lastModification > ds.lastSave || document.isDirty;
			var doRequest = function() {
				if(cancelToken.isCancellationRequested) {
					reject(null);
					return;
				}
				if(client.isPatchAvailable) {
					if(isDirty) _g.hxContext.patchFullDocument(ds).then(function(ds1) {
						make_request();
					},function(ds2) {
						reject(null);
					}); else make_request();
				} else changeDebouncer.whenDone(function() {
					if(cancelToken.isCancellationRequested) {
						reject(null);
						return;
					}
					var ps = [];
					var _g12 = 0;
					var _g2 = _g.hxContext.getDirtyDocuments();
					while(_g12 < _g2.length) {
						var ds3 = _g2[_g12];
						++_g12;
						ds3.diagnoseOnSave = false;
						ps.push(_g.hxContext.saveDocument(ds3));
					}
					if(ps.length == 0) make_request(); else Promise.all(ps).then(function(all) {
						if(cancelToken.isCancellationRequested) {
							reject(null);
							return;
						}
						make_request();
					},function(all3) {
						reject(null);
					});
				});
			};
			if(!client.isServerAvailable) _g.hxContext.launchServer().then(function(port) {
				doRequest();
			},function(port3) {
				reject(null);
			}); else doRequest();
		});
	}
};
var features_hxml_CompletionHandler = function(hxmlContext) {
	this.hxmlContext = hxmlContext;
	hxmlContext.hxContext.context.subscriptions.push(Vscode.languages.registerCompletionItemProvider("hxml",this,"-","D"," "));
};
features_hxml_CompletionHandler.__name__ = true;
features_hxml_CompletionHandler.__interfaces__ = [CompletionItemProvider];
features_hxml_CompletionHandler.prototype = {
	provideCompletionItems: function(document,position,cancelToken) {
		var items = [];
		var client = this.hxmlContext.hxContext.client;
		if(client != null) {
			var text = document.lineAt(position).text;
			var char_pos = position.character - 1;
			switch(text.charAt(char_pos)) {
			case "-":
				switch(char_pos) {
				case 0:
					var _g = 0;
					var _g1 = client.options;
					while(_g < _g1.length) {
						var data = _g1[_g];
						++_g;
						var ci = new Vscode.CompletionItem(HxOverrides.substr(data.prefix,1,null) + data.name);
						ci.documentation = data.doc;
						items.push(ci);
					}
					break;
				case 1:
					var _g2 = 0;
					var _g12 = client.options;
					while(_g2 < _g12.length) {
						var data2 = _g12[_g2];
						++_g2;
						if(data2.prefix.length < 2) continue;
						var ci2 = new Vscode.CompletionItem(data2.name);
						ci2.documentation = data2.doc;
						items.push(ci2);
					}
					break;
				}
				break;
			case "D":
				if(char_pos == 1 && text.charAt(char_pos - 1) == "-") {
					var _g3 = 0;
					var _g13 = client.defines;
					while(_g3 < _g13.length) {
						var data3 = _g13[_g3];
						++_g3;
						var ci3 = new Vscode.CompletionItem("D " + data3.name);
						ci3.documentation = data3.doc;
						items.push(ci3);
					}
				}
				break;
			case " ":
				if(char_pos == 2 && HxOverrides.substr(text,0,char_pos) == "-D") {
					var _g4 = 0;
					var _g14 = client.defines;
					while(_g4 < _g14.length) {
						var data4 = _g14[_g4];
						++_g4;
						var ci4 = new Vscode.CompletionItem(data4.name);
						ci4.documentation = data4.doc;
						items.push(ci4);
					}
				}
				break;
			}
		}
		return new Promise(function(resolve) {
			resolve(items);
		});
	}
	,resolveCompletionItem: function(item,cancelToken) {
		return item;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_RangeInfo = function(s,e,isLineRange) {
	if(isLineRange == null) isLineRange = false;
	if(e == null) e = -1;
	if(e == -1) e = s;
	if(s > e) {
		this.start = e;
		this.end = s;
	} else {
		this.start = s;
		this.end = e;
	}
	if(!isLineRange && this.start == this.end) this.end++;
	this.isLineRange = isLineRange;
};
haxe_RangeInfo.__name__ = true;
var haxe_Info = function(fileName,lineNumber,range,message) {
	this.fileName = fileName;
	this.lineNumber = lineNumber;
	this.range = range;
	this.message = message;
};
haxe_Info.__name__ = true;
haxe_Info.decode = function(str,cwd) {
	if(cwd == null) cwd = "";
	if(!haxe_Info.re1.match(str)) return null;
	if(!haxe_Info.re2.match(haxe_Info.re1.matched(5))) return null;
	var rs = Std.parseInt(haxe_Info.re2.matched(4));
	var re;
	var tmp = haxe_Info.re2.matched(6);
	if(tmp != null) re = Std.parseInt(tmp); else re = rs;
	if(re == null) re = rs;
	var isLine = haxe_Info.re2.matched(3) != null;
	var fn = haxe_Info.re1.matched(1);
	var wd = haxe_Info.re1.matched(2);
	if(wd != null) fn = fn.split("/").join("\\"); else {
		var ps = "/";
		var dps = "\\";
		if(haxe_Info.reWin.match(cwd)) {
			ps = "\\";
			dps = "/";
		}
		if(cwd.charAt(cwd.length - 1) != ps) cwd += ps;
		switch(fn.charAt(0)) {
		case "/":
			break;
		case "\\":
			break;
		default:
			fn = cwd + fn;
		}
		fn = fn.split(dps).join(ps);
	}
	return { info : new haxe_Info(fn,Std.parseInt(haxe_Info.re1.matched(4)),new haxe_RangeInfo(rs,re,isLine),haxe_Info.re1.matched(7)), winDrive : wd};
};
var haxe_HaxeClient = function(host,port) {
	this.currentJob = null;
	this.host = host;
	this.port = port;
	this.cmdLine = new haxe_HaxeCmdLine();
	this.queue = [];
	this.working = false;
	this.resetInfos();
};
haxe_HaxeClient.__name__ = true;
haxe_HaxeClient.isOptionExists = function(optionName,data) {
	return !new EReg("unknown option '" + optionName + "'","").match(data);
};
haxe_HaxeClient.prototype = {
	resetInfos: function() {
		this.options = [];
		this.defines = [];
		this.metas = [];
		this.keywords = [];
		this.optionsByName = new haxe_ds_StringMap();
		this.definesByName = new haxe_ds_StringMap();
		this.isHaxeServer = false;
		this.isPatchAvailable = false;
		this.isServerAvailable = false;
	}
	,clear: function() {
		this.cmdLine.clear();
	}
	,setContext: function(ctx) {
		this.sourceContext = ctx;
		return this;
	}
	,setCancelToken: function(ct) {
		this.cancelToken = ct;
		return this;
	}
	,sendAll: function(onClose,restoreCmdLine,id,priority,clearCmdAfterExec) {
		if(clearCmdAfterExec == null) clearCmdAfterExec = true;
		if(priority == null) priority = 0;
		if(restoreCmdLine == null) restoreCmdLine = false;
		var _g = this;
		var ctx = this.sourceContext;
		var ct = this.cancelToken;
		this.sourceContext = null;
		this.cancelToken = null;
		var cmds = this.cmdLine.toString();
		if(cmds == "") {
			if(restoreCmdLine) _g.cmdLine.restore();
			restoreCmdLine = false;
			if(onClose != null) onClose({ stdout : null, stderr : null, infos : null, socket : null, error : null, severity : 3});
			onClose = null;
			_g.working = false;
			_g.currentJob = null;
			this.runQueue();
			return null;
		}
		this.cmdLine.clearPatch();
		var workingDir = this.cmdLine.workingDir;
		if(restoreCmdLine) _g.cmdLine.restore();
		restoreCmdLine = false;
		var run = function(job) {
			_g.currentJob = job;
			var s = null;
			var ct1 = job.cancelToken;
			if(job.cancel || ct1 != null && ct1.isCancellationRequested) {
				if(s != null) s.close();
				if(restoreCmdLine) _g.cmdLine.restore();
				restoreCmdLine = false;
				if(onClose != null) onClose({ stdout : null, stderr : null, infos : null, socket : null, error : null, severity : 3});
				onClose = null;
				_g.working = false;
				_g.currentJob = null;
				_g.runQueue();
				return;
			}
			_g.working = true;
			s = new Socket();
			s.connect(_g.host,_g.port,function(s1) {
				if(job.cancel || ct1 != null && ct1.isCancellationRequested) {
					if(s != null) s.close();
					if(restoreCmdLine) _g.cmdLine.restore();
					restoreCmdLine = false;
					if(onClose != null) onClose({ stdout : null, stderr : null, infos : null, socket : null, error : null, severity : 3});
					onClose = null;
					_g.working = false;
					_g.currentJob = null;
					_g.runQueue();
					return;
				}
				s1.write(cmds);
				s1.write("\x00");
			},function(s2,d) {
				if(job.cancel || ct1 != null && ct1.isCancellationRequested) {
					if(s != null) s.close();
					if(restoreCmdLine) _g.cmdLine.restore();
					restoreCmdLine = false;
					if(onClose != null) onClose({ stdout : null, stderr : null, infos : null, socket : null, error : null, severity : 3});
					onClose = null;
					_g.working = false;
					_g.currentJob = null;
					_g.runQueue();
					return;
				}
			},null,function(s3) {
				_g.working = false;
				_g.isServerAvailable = s3.error == null;
				if(clearCmdAfterExec) _g.clear();
				if(job.cancel || ct1 != null && ct1.isCancellationRequested) {
					if(s != null) s.close();
					if(restoreCmdLine) _g.cmdLine.restore();
					restoreCmdLine = false;
					if(onClose != null) onClose({ stdout : null, stderr : null, infos : null, socket : null, error : null, severity : 3});
					onClose = null;
					_g.working = false;
					_g.currentJob = null;
					_g.runQueue();
					return;
				}
				if(onClose != null) {
					var stdout = [];
					var stderr = [];
					var infos = [];
					var hasError = false;
					var _g1 = 0;
					var _g2 = s3.datas.join("").split("\n");
					while(_g1 < _g2.length) {
						var line = _g2[_g1];
						++_g1;
						var _g3 = HxOverrides.cca(line,0);
						if(_g3 != null) switch(_g3) {
						case 1:
							stdout.push(HxOverrides.substr(line,1,null).split("\x01").join("\n"));
							break;
						case 2:
							hasError = true;
							break;
						default:
							stderr.push(line);
							var info = haxe_Info.decode(line,workingDir);
							if(info == null && ctx != null && line != "") info = haxe_Info.decode([ctx.fileName,ctx.line == null?"null":"" + ctx.line," character " + ctx.column + " ",line].join(":"),workingDir);
							if(info != null) infos.push(info.info);
						} else {
							stderr.push(line);
							var info3 = haxe_Info.decode(line,workingDir);
							if(info3 == null && ctx != null && line != "") info3 = haxe_Info.decode([ctx.fileName,ctx.line == null?"null":"" + ctx.line," character " + ctx.column + " ",line].join(":"),workingDir);
							if(info3 != null) infos.push(info3.info);
						}
					}
					onClose({ stdout : stdout, stderr : stderr, infos : infos, severity : hasError?2:1, socket : s3, error : s3.error});
				}
				_g.runQueue();
			});
		};
		if(id == "") id = null;
		var group = 0;
		if(id != null) {
			var tmp = id.split("@");
			id = tmp[0];
			if(id == "") id = null;
			if(tmp.length > 1) group = Std.parseInt(tmp[1]);
		}
		haxe_HaxeClient.jobId++;
		var sId = "-" + Std.string(haxe_HaxeClient.jobId);
		if(id == null) id = sId; else id += sId;
		var job3 = { run : run, id : id, group : group, priority : priority, cancelToken : ct, cancel : false};
		if(this.queue.length == 0) this.queue.push(job3); else {
			var oq = this.queue;
			this.queue = [];
			if(group != 0 && this.currentJob != null && group >= this.currentJob.group) this.currentJob.cancel = true;
			var jobPushed = false;
			while(oq.length > 0) {
				var j = oq.shift();
				if(j.priority < priority) {
					jobPushed = true;
					this.queue.push(job3);
					this.queue.push(j);
					break;
				} else this.queue.push(j);
			}
			this.queue = this.queue.concat(oq);
			if(!jobPushed) this.queue.push(job3);
		}
		if(!this.working) this.runQueue();
		return job3;
	}
	,runQueue: function() {
		if(this.queue.length == 0) return;
		var job = this.queue.shift();
		var group = job.group;
		if(group != 0) {
			var oq = this.queue;
			this.queue = [];
			while(oq.length > 0) {
				var nj = oq.shift();
				if(nj.group >= group) {
					if(nj.priority != job.priority) {
						nj.cancel = true;
						nj.run(nj);
					} else {
						job.cancel = true;
						job.run(job);
						job = nj;
					}
				} else this.queue.push(nj);
			}
		}
		if(job != null) job.run(job);
	}
	,unformatDoc: function(s) {
		return s;
	}
	,infos: function(onData) {
		var _g = this;
		this.resetInfos();
		var step = 0;
		var next = null;
		next = function() {
			_g.cmdLine.save();
			switch(step) {
			case 0:
				_g.cmdLine.help();
				break;
			case 1:
				_g.cmdLine.helpDefines();
				break;
			case 2:
				_g.cmdLine.helpMetas();
				break;
			case 3:
				_g.cmdLine.keywords();
				break;
			}
			_g.sendAll(function(message) {
				var error = message.error;
				var abort = true;
				_g.isServerAvailable = error == null;
				if(_g.isServerAvailable) switch(step) {
				case 0:
					var datas = message.stderr;
					if(datas.length > 0) {
						_g.version = datas.shift();
						_g.isHaxeServer = haxe_HaxeClient.reVersion.match(_g.version);
						abort = !_g.isHaxeServer;
						if(_g.isHaxeServer) {
							var _g1 = 0;
							while(_g1 < datas.length) {
								var data = datas[_g1];
								++_g1;
								if(haxe_HaxeClient.reCheckOption.match(data)) {
									if(haxe_HaxeClient.reCheckOptionName.match(haxe_HaxeClient.reCheckOption.matched(3))) {
										var name = haxe_HaxeClient.reCheckOptionName.matched(1);
										_g.isPatchAvailable = _g.isPatchAvailable || name == "patch";
										var option = { prefix : haxe_HaxeClient.reCheckOption.matched(1), name : name, doc : haxe_HaxeClient.reCheckOption.matched(4), param : haxe_HaxeClient.reCheckOptionName.matched(3)};
										_g.options.push(option);
										var _this = _g.optionsByName;
										if(__map_reserved[name] != null) _this.setReserved(name,option); else _this.h[name] = option;
									}
								}
							}
						}
					}
					break;
				case 1:
					var datas1 = message.stdout;
					abort = datas1.length <= 0;
					var _g11 = 0;
					while(_g11 < datas1.length) {
						var data1 = datas1[_g11];
						++_g11;
						if(haxe_HaxeClient.reCheckDefine.match(data1)) {
							var define = { name : haxe_HaxeClient.reCheckDefine.matched(1), doc : haxe_HaxeClient.reCheckDefine.matched(2)};
							_g.defines.push(define);
							var _this1 = _g.definesByName;
							var key = define.name;
							if(__map_reserved[key] != null) _this1.setReserved(key,define); else _this1.h[key] = define;
						}
					}
					break;
				case 2:
					var datas2 = message.stdout;
					abort = datas2.length <= 0;
					var _g12 = 0;
					while(_g12 < datas2.length) {
						var data2 = datas2[_g12];
						++_g12;
						if(haxe_HaxeClient.reCheckMeta.match(data2)) _g.metas.push({ prefix : haxe_HaxeClient.reCheckMeta.matched(1), name : haxe_HaxeClient.reCheckMeta.matched(2), doc : haxe_HaxeClient.reCheckMeta.matched(3)});
					}
					break;
				case 3:
					var datas3 = message.stderr;
					abort = datas3.length <= 0;
					if(!abort) haxe_HaxeClient.reKeywords.map(datas3[0],function(r) {
						var match = r.matched(1);
						_g.keywords.push({ name : match});
						return match;
					});
					break;
				}
				if(abort) {
					if(onData != null) onData(_g);
				} else {
					++step;
					next();
				}
			},true);
		};
		next();
	}
};
var haxe_DisplayMode = { __ename__ : true, __constructs__ : ["Default","Position","Usage","Type","TopLevel","Resolve"] };
haxe_DisplayMode.Default = ["Default",0];
haxe_DisplayMode.Default.toString = $estr;
haxe_DisplayMode.Default.__enum__ = haxe_DisplayMode;
haxe_DisplayMode.Position = ["Position",1];
haxe_DisplayMode.Position.toString = $estr;
haxe_DisplayMode.Position.__enum__ = haxe_DisplayMode;
haxe_DisplayMode.Usage = ["Usage",2];
haxe_DisplayMode.Usage.toString = $estr;
haxe_DisplayMode.Usage.__enum__ = haxe_DisplayMode;
haxe_DisplayMode.Type = ["Type",3];
haxe_DisplayMode.Type.toString = $estr;
haxe_DisplayMode.Type.__enum__ = haxe_DisplayMode;
haxe_DisplayMode.TopLevel = ["TopLevel",4];
haxe_DisplayMode.TopLevel.toString = $estr;
haxe_DisplayMode.TopLevel.__enum__ = haxe_DisplayMode;
haxe_DisplayMode.Resolve = function(v) { var $x = ["Resolve",5,v]; $x.__enum__ = haxe_DisplayMode; $x.toString = $estr; return $x; };
var haxe_HaxeCmdLine = function() {
	this.reset();
};
haxe_HaxeCmdLine.__name__ = true;
haxe_HaxeCmdLine.prototype = {
	clear: function(haveToClearPatch) {
		if(haveToClearPatch == null) haveToClearPatch = false;
		this.cmds = [];
		this.unique = new haxe_ds_StringMap();
		this.workingDir = "";
		if(haveToClearPatch) this.clearPatch();
	}
	,reset: function() {
		this.stack = [];
		this.clear(true);
	}
	,define: function(name,value) {
		if(name != "") {
			var str = "-D " + name;
			if(value != null) str += "=" + value;
			this.cmds.push(str);
		}
		return this;
	}
	,hxml: function(fileName) {
		var _this = this.unique;
		if(__map_reserved[" "] != null) _this.setReserved(" ",fileName); else _this.h[" "] = fileName;
		return this;
	}
	,cwd: function(dir) {
		var _this = this.unique;
		var value = "" + dir;
		if(__map_reserved["--cwd"] != null) _this.setReserved("--cwd",value); else _this.h["--cwd"] = value;
		this.workingDir = dir;
		return this;
	}
	,verbose: function() {
		var _this = this.unique;
		if(__map_reserved["-v"] != null) _this.setReserved("-v",""); else _this.h["-v"] = "";
		return this;
	}
	,version: function() {
		var _this = this.unique;
		if(__map_reserved["-version"] != null) _this.setReserved("-version",""); else _this.h["-version"] = "";
		return this;
	}
	,wait: function(port) {
		var _this = this.unique;
		var value = "" + port;
		if(__map_reserved["--wait"] != null) _this.setReserved("--wait",value); else _this.h["--wait"] = value;
		return this;
	}
	,noOutput: function() {
		var _this = this.unique;
		if(__map_reserved["--no-output"] != null) _this.setReserved("--no-output",""); else _this.h["--no-output"] = "";
		return this;
	}
	,keywords: function() {
		var _this = this.unique;
		if(__map_reserved["--display"] != null) _this.setReserved("--display","keywords"); else _this.h["--display"] = "keywords";
	}
	,classes: function() {
		var _this = this.unique;
		if(__map_reserved["--display"] != null) _this.setReserved("--display","classes"); else _this.h["--display"] = "classes";
	}
	,display: function(fileName,pos,mode) {
		var dm;
		switch(mode[1]) {
		case 0:
			dm = "";
			break;
		case 1:
			dm = "@position";
			break;
		case 2:
			dm = "@usage";
			break;
		case 3:
			dm = "@position";
			break;
		case 4:
			dm = "@toplevel";
			break;
		case 5:
			dm = "@resolve@" + mode[2];
			break;
		}
		var _this = this.unique;
		var value = "" + fileName + "@" + pos + dm;
		if(__map_reserved["--display"] != null) _this.setReserved("--display",value); else _this.h["--display"] = value;
		return this;
	}
	,help: function() {
		var _this = this.unique;
		if(__map_reserved["--help"] != null) _this.setReserved("--help",""); else _this.h["--help"] = "";
		return this;
	}
	,helpDefines: function() {
		var _this = this.unique;
		if(__map_reserved["--help-defines"] != null) _this.setReserved("--help-defines",""); else _this.h["--help-defines"] = "";
		return this;
	}
	,helpMetas: function() {
		var _this = this.unique;
		if(__map_reserved["--help-metas"] != null) _this.setReserved("--help-metas",""); else _this.h["--help-metas"] = "";
		return this;
	}
	,custom: function(argName,data,is_unique) {
		if(is_unique == null) is_unique = true;
		if(is_unique) {
			var _this = this.unique;
			if(__map_reserved[argName] != null) _this.setReserved(argName,data); else _this.h[argName] = data;
		} else this.cmds.push("" + argName + " " + data);
		return this;
	}
	,beginPatch: function(fileName) {
		var tmp;
		var _this = this.patchers;
		if(__map_reserved[fileName] != null) tmp = _this.getReserved(fileName); else tmp = _this.h[fileName];
		var tmp1 = tmp;
		if(tmp1 == null) tmp1 = new haxe_HaxePatcherCmd(fileName);
		var _this1 = this.patchers;
		if(__map_reserved[fileName] != null) _this1.setReserved(fileName,tmp1); else _this1.h[fileName] = tmp1;
		return tmp1;
	}
	,clearPatch: function() {
		this.patchers = new haxe_ds_StringMap();
		return this;
	}
	,save: function() {
		var wd = this.workingDir;
		var pt = this.patchers;
		this.stack.push({ cmds : this.cmds, unique : this.unique, workingDir : wd});
		this.clear();
		this.patchers = pt;
		if(wd != "") this.cwd(wd);
		return this;
	}
	,restore: function() {
		var i = this.stack.pop();
		this.cmds = i.cmds;
		this.unique = i.unique;
		this.workingDir = i.workingDir;
		return this;
	}
	,clone: function() {
		var cl = new haxe_HaxeCmdLine();
		cl.cmds = this.cmds.concat([]);
		var clu = cl.unique;
		var tmp = this.unique.keys();
		while(tmp.hasNext()) {
			var key = tmp.next();
			var tmp1;
			var _this = this.unique;
			if(__map_reserved[key] != null) tmp1 = _this.getReserved(key); else tmp1 = _this.h[key];
			var value = tmp1;
			if(__map_reserved[key] != null) clu.setReserved(key,value); else clu.h[key] = value;
		}
		cl.workingDir = this.workingDir;
		return cl;
	}
	,toString: function() {
		var cmds = this.cmds.concat([]);
		var tmp = this.unique.keys();
		while(tmp.hasNext()) {
			var key = tmp.next();
			var tmp1 = key + " ";
			var tmp2;
			var _this = this.unique;
			if(__map_reserved[key] != null) tmp2 = _this.getReserved(key); else tmp2 = _this.h[key];
			cmds.push(tmp1 + tmp2);
		}
		var tmp3 = this.patchers.keys();
		while(tmp3.hasNext()) {
			var key3 = tmp3.next();
			var tmp4;
			var _this4 = this.patchers;
			if(__map_reserved[key3] != null) tmp4 = _this4.getReserved(key3); else tmp4 = _this4.h[key3];
			cmds.push(tmp4.toString());
		}
		return cmds.join("\n");
	}
};
var haxe_HaxeConfiguration = function() { };
haxe_HaxeConfiguration.__name__ = true;
haxe_HaxeConfiguration.addTrailingSep = function(path,platform) {
	if(path == "") return path;
	path = path.split(platform.reversePathSeparator).join(platform.pathSeparator);
	if(path.charAt(path.length - 1) != platform.pathSeparator) path += platform.pathSeparator;
	return path;
};
haxe_HaxeConfiguration.update = function(conf,platform) {
	var exec = "haxe" + platform.executableExtension;
	var tmp = haxe_HaxeConfiguration.addTrailingSep(conf.haxePath,platform);
	conf.haxePath = tmp;
	conf.haxeExec = tmp + exec;
	tmp = haxe_HaxeConfiguration.addTrailingSep(conf.haxelibPath,platform);
	conf.haxelibPath = tmp;
	conf.haxelibExec = tmp + "haxelib" + platform.executableExtension;
	return conf;
};
var haxe_HaxePatcherCmd = function(fileName) {
	this.fileName = fileName;
	this.actions = [];
};
haxe_HaxePatcherCmd.__name__ = true;
haxe_HaxePatcherCmd.$name = function() {
	return "--patch";
};
haxe_HaxePatcherCmd.opToString = function(pop) {
	switch(pop.op) {
	case "+":
		return "" + pop.unit + "+" + pop.pos + ":" + pop.content + "\x01";
	case "-":
		return "" + pop.unit + "-" + pop.pos + ":" + pop.len + "\x01";
	case "r":
		return "" + pop.unit + "-" + "0:-1\x01@" + pop.unit + "+" + "0:" + pop.content + "\x01";
	}
};
haxe_HaxePatcherCmd.prototype = {
	reset: function() {
		this.actions = [];
		return this;
	}
	,remove: function() {
		this.pendingOP = null;
		this.actions = ["x\x01"];
		return this;
	}
	,'delete': function(pos,len,unit) {
		if(unit == null) unit = "b";
		var op = "-";
		if(this.pendingOP == null) this.pendingOP = { unit : unit, op : op, pos : pos, len : len}; else if(this.pendingOP.op == op && this.pendingOP.unit == unit) {
			if(this.pendingOP.pos == pos) this.pendingOP.len += len; else if(this.pendingOP.pos == pos + len) {
				this.pendingOP.len += len;
				this.pendingOP.pos = pos;
			} else {
				this.actions.push(haxe_HaxePatcherCmd.opToString(this.pendingOP));
				this.pendingOP = { unit : unit, op : op, pos : pos, len : len};
			}
		} else {
			this.actions.push(haxe_HaxePatcherCmd.opToString(this.pendingOP));
			this.pendingOP = { unit : unit, op : op, pos : pos, len : len};
		}
		return this;
	}
	,insert: function(pos,len,text,unit) {
		if(unit == null) unit = "b";
		var op = "+";
		if(this.pendingOP == null) this.pendingOP = { unit : unit, op : op, pos : pos, len : len, content : text}; else if(this.pendingOP.op == op && this.pendingOP.unit == unit) {
			if(this.pendingOP.pos + this.pendingOP.len == pos) {
				this.pendingOP.len += len;
				this.pendingOP.content += text;
			} else if(this.pendingOP.pos == pos) {
				this.pendingOP.len += len;
				this.pendingOP.content = text + this.pendingOP.content;
			} else {
				this.actions.push(haxe_HaxePatcherCmd.opToString(this.pendingOP));
				this.pendingOP = { unit : unit, op : op, pos : pos, len : len, content : text};
			}
		} else {
			this.actions.push(haxe_HaxePatcherCmd.opToString(this.pendingOP));
			this.pendingOP = { unit : unit, op : op, pos : pos, len : len, content : text};
		}
		return this;
	}
	,replace: function(text) {
		var unit = "b";
		var op = "r";
		if(this.pendingOP == null) this.pendingOP = { unit : unit, op : op, pos : 0, len : -1, content : text}; else if(this.pendingOP.op == op) this.pendingOP.content = text; else {
			this.actions.push(haxe_HaxePatcherCmd.opToString(this.pendingOP));
			this.pendingOP = { unit : unit, op : op, pos : 0, len : -1, content : text};
		}
		return this;
	}
	,toString: function() {
		if(this.pendingOP != null) {
			this.actions.push(haxe_HaxePatcherCmd.opToString(this.pendingOP));
			this.pendingOP = null;
		}
		if(this.actions.length == 0) return "";
		return "--patch" + (" " + this.fileName + "@" + this.actions.join("@") + "\n");
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
};
var haxe_crypto_Sha1 = function() {
};
haxe_crypto_Sha1.__name__ = true;
haxe_crypto_Sha1.encode = function(s) {
	var sh = new haxe_crypto_Sha1();
	return sh.hex(sh.doEncode(haxe_crypto_Sha1.str2blks(s)));
};
haxe_crypto_Sha1.str2blks = function(s) {
	var nblk = (s.length + 8 >> 6) + 1;
	var blks = [];
	var _g1 = 0;
	var _g = nblk * 16;
	while(_g1 < _g) blks[_g1++] = 0;
	var _g11 = 0;
	var _g2 = s.length;
	while(_g11 < _g2) {
		var i2 = _g11++;
		blks[i2 >> 2] |= HxOverrides.cca(s,i2) << 24 - ((i2 & 3) << 3);
	}
	var i = s.length;
	blks[i >> 2] |= 128 << 24 - ((i & 3) << 3);
	blks[nblk * 16 - 1] = s.length * 8;
	return blks;
};
haxe_crypto_Sha1.prototype = {
	doEncode: function(x) {
		var w = [];
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var e = -1009589776;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			var olde = e;
			var j = 0;
			while(j < 80) {
				if(j < 16) w[j] = x[i + j]; else {
					var num = w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16];
					w[j] = num << 1 | num >>> 31;
				}
				var t = (a << 5 | a >>> 27) + this.ft(j,b,c,d) + e + w[j] + this.kt(j);
				e = d;
				d = c;
				c = b << 30 | b >>> 2;
				b = a;
				a = t;
				++j;
			}
			a += olda;
			b += oldb;
			c += oldc;
			d += oldd;
			e += olde;
			i += 16;
		}
		return [a,b,c,d,e];
	}
	,ft: function(t,b,c,d) {
		if(t < 20) return b & c | ~b & d;
		if(t < 40) return b ^ c ^ d;
		if(t < 60) return b & c | b & d | c & d;
		return b ^ c ^ d;
	}
	,kt: function(t) {
		if(t < 20) return 1518500249;
		if(t < 40) return 1859775393;
		if(t < 60) return -1894007588;
		return -899497514;
	}
	,hex: function(a) {
		var str = "";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += StringTools.hex(num,8);
		}
		return str.toLowerCase();
	}
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) return _this.getReserved(key); else return _this.h[key];
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) this.rh = { };
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) return null; else return this.rh["$" + key];
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) return false;
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) return false;
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) out.push(key);
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) out.push(key.substr(1));
			}
		}
		return out;
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	return (val instanceof Error)?val:new js__$Boot_HaxeError(val);
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i2 = _g1++;
					if(i2 != 2) str2 += "," + js_Boot.__string_rec(o[i2],s); else str2 += js_Boot.__string_rec(o[i2],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i3 = _g2++;
				str1 += (i3 > 0?",":"") + js_Boot.__string_rec(o[i3],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_node_ChildProcess = require("child_process");
var js_node_Fs = require("fs");
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_net_Socket = require("net").Socket;
var platform_Platform = function() {
};
platform_Platform.__name__ = true;
platform_Platform.init = function(platformName) {
	if(platform_Platform.instance == null) platform_Platform.instance = new platform_Platform();
	if(platformName == "win32") {
		platform_Platform.instance.pathSeparator = "\\";
		platform_Platform.instance.reversePathSeparator = "/";
		platform_Platform.instance.executableExtension = ".exe";
		platform_Platform.instance.isWin = true;
	} else {
		platform_Platform.instance.pathSeparator = "/";
		platform_Platform.instance.reversePathSeparator = "\\";
		platform_Platform.instance.executableExtension = "";
		platform_Platform.instance.isWin = false;
	}
	return platform_Platform.instance;
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = ["Date"];
var __map_reserved = {}
HxmlContext.reComment = new EReg("\\s*#(.+)","");
HxmlContext.reCheckOption = new EReg("^\\s*(-(-)?)([^\\s]+)(\\s+(.*))?","");
HxmlContext.reDefineParam = new EReg("([^=]+)(=(.+))?","");
HxmlContext.reMain = new EReg("\\s*(.+)","");
HxmlContext.reLibOption = new EReg("^\\s*-lib\\s+([^\\s]+)(.*)","");
HxmlContext.reCpOption = new EReg("^\\s*-cp\\s+([^#]+)(.*)","");
features_CompletionHandler.reI = new EReg("<i n=\"([^\"]+)\" k=\"([^\"]+)\"( ip=\"([0-1])\")?( f=\"(\\d+)\")?><t>([^<]*)</t><d>([^<]*)</d></i>","");
features_CompletionHandler.reGT = new EReg("&gt;","g");
features_CompletionHandler.reLT = new EReg("&lt;","g");
features_CompletionHandler.reMethod = new EReg("Void|Unknown","");
features_CompletionHandler.reWord = new EReg("[a-zA-Z_$]","");
features_CompletionHandler.reWS = new EReg("[\r\n\t\\s]","");
features_DefinitionHandler.rePos = new EReg("[^<]*<pos>(.+)</pos>.*","");
features_SignatureHandler.reType = new EReg("<type(\\s+opar='(\\d+)')?(\\s+index='(\\d+)')?>","");
features_SignatureHandler.reGT = new EReg("&gt;","g");
features_SignatureHandler.reLT = new EReg("&lt;","g");
features_hxml_CompletionHandler.reI = new EReg("<i n=\"([^\"]+)\" k=\"([^\"]+)\"( ip=\"([0-1])\")?( f=\"(\\d+)\")?><t>([^<]*)</t><d>([^<]*)</d></i>","");
features_hxml_CompletionHandler.reGT = new EReg("&gt;","g");
features_hxml_CompletionHandler.reLT = new EReg("&lt;","g");
features_hxml_CompletionHandler.reMethod = new EReg("Void|Unknown","");
haxe_Info.reWin = new EReg("^\\w+:\\\\","");
haxe_Info.re1 = new EReg("^((\\w+:\\\\)?([^:]+)):(\\d+):\\s*([^:]+)(:(.+))?","");
haxe_Info.re2 = new EReg("^((character[s]?)|(line[s]?))\\s+(\\d+)(\\-(\\d+))?","");
haxe_HaxeClient.jobId = 0;
haxe_HaxeClient.reVersion = new EReg("^Haxe\\s+(.+?)(\\d+).(\\d+).(\\d+)(.+)?","");
haxe_HaxeClient.reCheckOption = new EReg("^\\s*(-(-)?)(.+?) : ([\\s\\S]+)","");
haxe_HaxeClient.reCheckDefine = new EReg("^\\s*([^\\s]+)\\s+: ([\\s\\S]+)","");
haxe_HaxeClient.reCheckMeta = new EReg("^\\s*(@:)([^\\s]+)\\s+: ([\\s\\S]+)","");
haxe_HaxeClient.reCheckOptionName = new EReg("([^\\s]+)(\\s+(.+))?","");
haxe_HaxeClient.reKeywords = new EReg("n=\\\\\"([^\\\\]+?)\\\\\"","g");
})(typeof window != "undefined" ? window : typeof exports != "undefined" ? exports : typeof self != "undefined" ? self : this);
